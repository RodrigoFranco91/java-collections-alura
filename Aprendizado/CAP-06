Neste capítulo aplicamos o conjunto/set em um modelo (classe de negocio):


1) Primeiro passo foi criar a classe Aluno:

	public class Aluno {

	    private String nome;
	    private int numeroMatricula;

	    public Aluno(String nome, int numeroMatricula) {
		this.nome = nome;
		this.numeroMatricula = numeroMatricula;
	    }

	    public String getNome() {
		return nome;
	    }

	    public int getNumeroMatricula() {
		return numeroMatricula;
	    }

	    @Override
	    public String toString() {
		return "Aluno: " + this.nome + " - Matricula: "+ this.numeroMatricula;
	    }
	}
	
	
2) Criamos na classe Curso um atributo alunos, que no caso será uma conjunto do tipo Aluno. Também criamos o método
matricula() que adiciona nesse conjunto aluno e o método getAlunos() que retorna um conjunto imutavel. Lembre-se que não é 
retornado um novo conjuntom, pois a referencia criada aponta para o mesmo conjunto, só que a referencia não tem o metodo add(). 
Veja como ficou:

	public class Curso {

	    private String nome;
	    private String instrutor;

	    //Lembvre-se de sempre usar a interface e não a classe para criar a lista!
	    private List<Aula> aulas = new LinkedList<>();

	    //Criando um conjunto/set que terá alunos
	    private Set<Aluno> alunos = new HashSet<>();


	    public Curso(String nome, String instrutor) {
		this.nome = nome;
		this.instrutor = instrutor;
	    }

	    public String getInstrutor() {
		return instrutor;
	    }

	    public String getNome() {
		return nome;
	    }

	    //A lista retornada não permite que itens sejam adicionados, ou seja, ñ vamos acessar o add desta lista!
	    //Não estamos criando uma nova lista, a referencia aponta para mesma lista, mas sem opcão de add
	    public List<Aula> getAulas() {
		return Collections.unmodifiableList(aulas);
	    }

	    public void adiciona(Aula aula) {
		this.aulas.add(aula);
	    }

	//    public int getTempoTotal() {
	//        int tempoTotal = 0;
	//        for (Aula aula : aulas) {
	//            tempoTotal += aula.getTempo();
	//        }
	//        return tempoTotal;
	//    }

	    public int getTempoTotal() {
		return this.aulas.stream().mapToInt(Aula::getTempo).sum();
	    }

	    @Override
	    public String toString() {
		return "Curso: " + this.nome + " - Tempo total: " + this.getTempoTotal();
	    }

	    public void matricula(Aluno aluno) {
		this.alunos.add(aluno);
	    }

	    //O conjunto retornado não permite que itens sejam adicionados, ou seja, ñ vamos acessar o add deste conjunto!
	    //Não estamos criando um novo conjunto, a referencia aponta para mesmo conjunto, mas sem opcão de add
	    public Set<Aluno> getAlunos() {
		return Collections.unmodifiableSet(alunos);
	    }
	}
	
	
3) Por fim criamos uma classe de teste, para manipular esse conjunto. Veja:

	public class TesteCursoComAlunos {

	    public static void main(String[] args) {

		//Criando objeto Curso
		Curso javaColecoes = new Curso("Dominando as coleções do Java", "Paulo SIlveira");

		//Adicionando aula no curso.
		javaColecoes.adiciona(new Aula("Trabalhando com ArrayList", 21));
		javaColecoes.adiciona(new Aula("Criando uma aula", 20));
		javaColecoes.adiciona(new Aula("Modelando as Coleçoes", 24));

		Aluno a1 = new Aluno("Rodigo Turini", 34672);
		Aluno a2 = new Aluno("Guilherme Silveira", 5617);
		Aluno a3 = new Aluno("Mauricio ANiche", 17645);

		//Vamos adicionar aluno no curso, logo podemos criar um metodo para isso na classe Curso
		javaColecoes.matricula(a1);
		javaColecoes.matricula(a2);
		javaColecoes.matricula(a3);

		//Percorrendo o conjunto
		System.out.println("Alunos matriculados:");
		javaColecoes.getAlunos().forEach(aluno -> {
		    System.out.println(aluno);
		});

	    }
	}

